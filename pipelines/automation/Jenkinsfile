@Library('polaris')
import ca.bc.gov.nrids.polaris.Podman
import ca.bc.gov.nrids.polaris.BrokerIntention
import ca.bc.gov.nrids.polaris.Vault
import ca.bc.gov.nrids.polaris.JenkinsUtil

def intention

pipeline {
    agent {
        label Podman.AGENT_LABEL_APP
    }
    environment {
        CONFIG_ROLE_ID = credentials('knox-vault-jenkins-aws-automation-role-id')
        NR_BROKER_JWT = credentials('nr-broker-jwt')
        HTTP_PROXY = "http://test-forwardproxy.nrs.bcgov:23128"
        HTTPS_PROXY = "http://test-forwardproxy.nrs.bcgov:23128"
        NO_PROXY = "${Vault.KNOX_URL}"
        AUTHFILE = "fluent-bit.auth.json"
    }
    stages {
        stage('Setup') {
            steps {
                script {
                    intention = new BrokerIntention(NR_BROKER_JWT, readJSON(file: 'scripts/intention-aws-automation.json'))
                    intention.setEventDetails(
                        url: env.BUILD_URL
                    )
                    if (!intention.open()) {
                        currentBuild.result = 'ABORTED'
                        error('Intention could not be opened')
                    }
                }
            }
        }
        stage('Get credentials') {
            steps {
                script {
                    intention.startAction("login")
                    def vaultToken = intention.provisionToken("login", CONFIG_ROLE_ID)
                    def vault = new Vault(vaultToken)
                    vault.readToObject("apps/data/prod/jenkins/aws-automation", env, keyTransform: { key -> key.toUpperCase() })
                    env.AWS_ACCESS_KEY_ID = env.AWS_ACCESS_KEY
                    env.REGISTRY_USERNAME = env.ARTIFACTORY_USERNAME
                    env.REGISTRY_PASSWORD = env.ARTIFACTORY_PASSWORD
                    env.AWS_REGION = "ca-central-1"
                    env.AWS_DEFAULT_REGION = "ca-central-1"
                    env.OS_URL = "apm.io.nrs.gov.bc.ca"
                    env.OS_DOMAIN = "nress-prod"
                    vault.revokeToken()
                }
            }
        }
        stage('Read Automation Queue') {
            steps {
                script {
                    def podman = new Podman(this, null, env.AUTHFILE, "artifacts.developer.gov.bc.ca/cc20-gen-docker-local")
                    podman.login(authfile: "${env.AUTHFILE}", options: "-u ${env.REGISTRY_USERNAME} -p ${env.REGISTRY_PASSWORD}")
                    def agentMap = [:]
                    // Read queue
                    def automationOutput = podman.run(
                        "nr-apm-stack-workflow:latest",
                        authfile: "${env.AUTHFILE}",
                        options: "-e 'AWS_*' -e 'OS_*'",
                        command: "automation-message",
                        httpProxy: "http://test-forwardproxy.nrs.bcgov:23128",
                        returnStdout: true
                    )
                    .substring(17)
                    .trim()
                    echo automationOutput
                    def messageArr = readJSON text: automationOutput
                    messageArr.each {
                        if (!agentMap[it.server + it.agent]) {
                            echo 'Starting: ' + it.server + ':' + it.agent
                            build job: './fluentbit-start-agent',
                                parameters: [
                                    string(name: 'fluentbitHost', value: String.valueOf(it.server)),
                                    string(name: 'fluentbitAgent', value: String.valueOf(it.agent))
                                ],
                                wait: false
                            agentMap[it.server + it.agent] = true;
                        }
                    }
                    podman.logout(authfile: "${env.AUTHFILE}")
                    intention.endAction("login")
                }
            }
        }
    }
    post {
        success {
            script {
                intention.close(true)
            }
        }
        unstable {
            script {
                if (intention) {
                    intention.close(false)
                }
            }
        }
        failure {
            script {
                if (intention) {
                    intention.close(false)
                }
            }
        }
    }
}
