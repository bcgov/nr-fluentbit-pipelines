@Library('polaris')
import ca.bc.gov.nrids.polaris.Podman
import ca.bc.gov.nrids.polaris.BrokerIntention
import ca.bc.gov.nrids.polaris.Vault
import ca.bc.gov.nrids.polaris.JenkinsUtil

def podman
def intention
def commonModule = [:]

pipeline {
    agent {
        label Podman.AGENT_LABEL_APP
    }
    environment {
        FB_FUNBUCKS_OUTPUT = "fb/output"
        FB_S6_SERVICE_HOME = "/apps_ux/s6_services"
        FB_INSTALL_USER = "wwwadm"
        FB_RUN_USER = "wwwsvr"
        FB_VAULT_RELEASE = "1.17.0"
        FB_ENVCONSUL_RELEASE = "0.13.2"
        FB_JQ_RELEASE = "1.7.1"
        FB_SQLITE_RELEASE = "3.46.0"
        FB_WINSW_RELEASE = "v2.12.0"
        FB_BROKER_URL = "https://broker.io.nrs.gov.bc.ca"
        FB_BUILD_URL = "${env.BUILD_URL}"
        FB_CONFIG_ROLE_ID = credentials('knox-jenkins-jenkins-apps-prod-role-id')
        FB_ROLE_ID = credentials('knox-vault-fluentbit-app-role-id')
        NR_BROKER_JWT = credentials('nr-broker-jwt')
        IMAGE_TAG = "${params.imageTag}"
        AUTHFILE = "fluent-bit.auth.json"
    }
    stages {
        stage('Setup') {
            environment {
                HTTP_PROXY = "http://test-forwardproxy.nrs.bcgov:23128"
                FB_GIT_BRANCH = "${params.fbGitBranch}"
            }
            steps {
                script {
                    sh 'rm -rf fb && mkdir fb'
                    sh "git clone -b ${params.fbGitBranch} https://github.com/bcgov/nr-funbucks.git fb"
                    commonModule = load "pipelines/common.groovy"
                    env.FB_HOSTNAME = "${params.fluentbitHost}"
                    env.FB_HOST = commonModule.getHost("${params.fluentbitHost}")
                    env.FB_SERVER_OS = commonModule.getServerOS("${params.fluentbitHost}")
                    env.FB_FLUENTBIT_RELEASE = commonModule.getFluentBitRelease("${params.fluentbitHost}")
                    if (env.FB_SERVER_OS != "linux" && env.FB_SERVER_OS != "windows") {
                        currentBuild.result = 'ABORTED'
                        error('Invalid server OS')
                    }
                    env.FB_OS_VARIANT = commonModule.getOSVariant("${params.fluentbitHost}")
                    env.FB_BIN_DIR = "${env.FB_SERVER_OS == "linux" ? "/sw_ux/bin" : "E:/sw_nt"}"
                    env.FB_AGENT_ROOT = "${env.FB_SERVER_OS == "linux" ? "/apps_ux/agents" : "E:/apps_nt/agents"}"
                    env.FB_TMP_DIR = "${env.FB_SERVER_OS == "linux" ? "/tmp/fluent-bit.${UUID.randomUUID().toString()[0..7]}" : "E:/tmp/fluent-bit.${UUID.randomUUID().toString()[0..7]}"}"
                    env.FB_VAULT_CD_USER_FIELD = commonModule.getVaultCdUserField("${params.fluentbitHost}")
                    env.FB_VAULT_CD_PASS_FIELD = commonModule.getVaultCdPassField("${params.fluentbitHost}")
                    env.FB_VAULT_CD_PATH = commonModule.getVaultCdPath("${params.fluentbitHost}")
                    env.HTTP_PROXY_URL = commonModule.getHttpProxy("${params.fluentbitHost}")
                    env.LOGS_PROXY_DISABLED = commonModule.getLogsProxyDisabled("${params.fluentbitHost}")
                    env.LOGS_HTTP_PROXY = "${env.LOGS_PROXY_DISABLED == 'true' ? '' : env.HTTP_PROXY_URL}"
                    intention = new BrokerIntention(NR_BROKER_JWT, readJSON(file: 'scripts/intention-fb-install.json'))
                    intention.setEventDetails(
                        userName: "${params.groupDeployment ? JenkinsUtil.getUpstreamCauseUserId(currentBuild) : JenkinsUtil.getCauseUserId(currentBuild)}",
                        url: env.BUILD_URL,
                        packageInstallationName: "fluent-bit-${env.FB_OS_VARIANT}",
                        packageInstallationVersion: "${env.FB_FLUENTBIT_RELEASE}+${env.FB_OS_VARIANT}"
                    )
                    intention.intention.actions[1].cloud.target.instance.name = params.fluentbitHost
                    intention.open()
                    intention.startAction("login")
                    def vaultToken = intention.provisionToken("login", FB_CONFIG_ROLE_ID)
                    def vault = new Vault(vaultToken)
                    def registryCreds = vault.read('apps/data/prod/jenkins/jenkins-apps/artifactory')
                    env.REGISTRY_USERNAME = registryCreds['REGISTRY_USERNAME']
                    env.REGISTRY_PASSWORD = registryCreds['REGISTRY_PASSWORD']
                    def vault_cd_path = "${env.FB_VAULT_CD_PATH}"
                    def cdCreds = vault.read(vault_cd_path.replaceFirst('/', '/data/'))
                    def ciCreds = vault.read('apps/data/prod/jenkins/jenkins-apps/ci')
                    env.FB_CD_USER = cdCreds[env.FB_VAULT_CD_USER_FIELD]
                    env.FB_CD_PASS = cdCreds[env.FB_VAULT_CD_PASS_FIELD]
                    env.FB_CI_USER = ciCreds.username_lowercase
                    env.FB_CI_PASS = ciCreds.password
                    vault.revokeToken()
                    env.NO_PROXY = "${Vault.KNOX_URL}"
                }
                sh 'mkdir $(pwd)/fb/output'
            }
        }
        stage('Build config') {
            steps {
                script {
                    podman = new Podman(this, null, "artifacts.developer.gov.bc.ca/cc20-gen-docker-local")
                    podman.login(authfile: "${env.AUTHFILE}", options: "-u ${env.REGISTRY_USERNAME} -p ${env.REGISTRY_PASSWORD}")
                    podman.run("nr-funbucks:${params.imageTag}",
                        authfile: "${env.AUTHFILE}",
                        options: "-v \$(pwd)/fb/config:/app/config -v \$(pwd)/fb/output:/app/output",
                        command: "gen -m -s ${params.fluentbitHost}")
                    def agentls = sh(script: "ls \$(pwd)/fb/output", returnStdout: true)
                    env.FB_AGENT_COUNT = agentls.split("\\r?\\n").length
                }
            }
        }
        stage('Copy files') {
            steps {
                script {
                    intention.startAction("install")
                    podman = new Podman(this, null, "artifacts.developer.gov.bc.ca/cc20-gen-docker-local")
                    podman.run("fb-helper:${params.imageTag}",
                        authfile: "${env.AUTHFILE}",
                        options: "-v \$(pwd)/files/ssh-config:/app/ssh-config -v \$(pwd)/scripts:/app/scripts -v \$(pwd)/fb:/app/fb -v \$(pwd)/files:/app/files -e 'FB_*'",
                        command: "scripts/${FB_SERVER_OS.toLowerCase()}/copy_files.sh")
                }
            }
        }
        stage('Stop fluent bit') {
            steps {
                script {
                    podman.run("fb-helper:${params.imageTag}",
                        authfile: "${env.AUTHFILE}",
                        options: "-v \$(pwd)/files/ssh-config:/app/ssh-config -v \$(pwd)/scripts:/app/scripts -e 'FB_*' -e VAULT_ADDR=${Vault.KNOX_URL}",
                        command: "scripts/${FB_SERVER_OS.toLowerCase()}/stop_fluentbit.sh")
                }
            }
        }
        stage('Remove previous agents') {
            steps {
                script {
                    podman.run("fb-helper:${params.imageTag}",
                        authfile: "${env.AUTHFILE}",
                        options: "-v \$(pwd)/files/ssh-config:/app/ssh-config -v \$(pwd)/scripts:/app/scripts -e 'FB_*' -e VAULT_ADDR=${Vault.KNOX_URL}",
                        command: "scripts/${FB_SERVER_OS.toLowerCase()}/remove_agents.sh")
                }
            }
        }
        stage('Deploy agents') {
            steps {
                script {
                    if (env.FB_SERVER_OS == "linux") {
                        env.FB_ARTIFACTORY_USERNAME = "${env.REGISTRY_USERNAME}"
                        env.FB_ARTIFACTORY_PASSWORD = "${env.REGISTRY_PASSWORD}"
                        podman.run("fb-helper:${params.imageTag}",
                            authfile: "${env.AUTHFILE}",
                            options: "-v \$(pwd)/files/ssh-config:/app/ssh-config -v \$(pwd)/scripts:/app/scripts -e 'FB_*' -e VAULT_ADDR=${Vault.KNOX_URL} -e HTTP_PROXY=${LOGS_HTTP_PROXY} -e NO_PROXY=${NO_PROXY}",
                            command: "scripts/linux/deploy_agents.sh")
                    } else if (env.FB_SERVER_OS == "windows") {
                        podman.run("fb-helper:${params.imageTag}",
                            authfile: "${env.AUTHFILE}",
                            options: "-v \$(pwd)/files/ssh-config:/app/ssh-config -v \$(pwd)/scripts:/app/scripts -e 'FB_*' -e VAULT_ADDR=${Vault.KNOX_URL} -e HTTP_PROXY=${LOGS_HTTP_PROXY} -e NO_PROXY=${NO_PROXY}",
                            command: "scripts/windows/deploy_agents_base.sh")
                        podman.run("fb-helper:${params.imageTag}",
                            authfile: "${env.AUTHFILE}",
                            options: "-v \$(pwd)/files/ssh-config:/app/ssh-config -v \$(pwd)/scripts:/app/scripts -e 'FB_*' -e VAULT_ADDR=${Vault.KNOX_URL} -e HTTP_PROXY=${LOGS_HTTP_PROXY} -e NO_PROXY=${NO_PROXY}",
                            command: "scripts/windows/deploy_agents_service.sh")
                    }
                    def appIds = podman.run(
                        "fb-helper:${params.imageTag}",
                        authfile: "${env.AUTHFILE}",
                        options: "-v \$(pwd)/fb/config:/app/config -v \$(pwd)/scripts:/app/scripts -e 'FB_*'",
                        command: "scripts/id_csv.sh",
                        returnStdout: true
                    )
                    intention.patchAction("install", "{\"cloud\":{\"target\":{\"propStrategy\":\"merge\",\"prop\": {\"agent_count\":\"${env.FB_AGENT_COUNT}\", \"app_ids\":\"${appIds.trim()}\", \"install_user\":\"${env.FB_INSTALL_USER}\", \"run_user\":\"${env.FB_RUN_USER}\"}}}}")
                    intention.endAction("install")
                }
            }
        }
        stage('Get secret ID') {
            steps {
                script {
                    intention.startAction("provision")
                    def wrapped_fb_secret_id = intention.provisionSecretId("provision", FB_ROLE_ID)
                    env.WRAPPED_FB_SECRET_ID = wrapped_fb_secret_id
                }
            }
        }
        stage('Start fluent bit') {
            steps {
                script {
                    podman.run("fb-helper:${params.imageTag}",
                        authfile: "${env.AUTHFILE}",
                        options: "-v \$(pwd)/files/ssh-config:/app/ssh-config -v \$(pwd)/scripts:/app/scripts -e 'FB_*' -e VAULT_ADDR=${Vault.KNOX_URL} -e 'WRAPPED_FB_SECRET_ID*'",
                        command: "scripts/${FB_SERVER_OS.toLowerCase()}/start_fluentbit_agent.sh",
                        skipPipelineEnv: true)
                    podman.logout(authfile: "${env.AUTHFILE}")
                    intention.endAction("provision")
                    intention.endAction("login")
                }
            }
        }
    }
    post {
        success {
            script {
                intention.close(true)
            }
        }
        unstable {
            script {
                if (intention) {
                    println intention.close(false)
                }
            }
        }
        failure {
            script {
                if (intention) {
                    println intention.close(false)
                }
            }
        }
    }
}
